From 235c0ec26f9f05a2197e32ed0d3475b82ed781bb Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Tue, 9 May 2023 14:19:10 +0530
Subject: [PATCH] Bug 1515342 - More thorough input checking, r=jcj

All part of applying better discipline throughout.

Differential Revision: https://phabricator.services.mozilla.com/D33736

--HG--
extra : moz-landing-system : lando

Bug 1515342 - Ignore spki decode failures on negative (expect_fail) tests. r=jcj

Differential Revision: https://phabricator.services.mozilla.com/D35565

--HG--
extra : moz-landing-system : lando

[sshedi: combined following 2 commits and ported changes to 3.44]
https://github.com/nss-dev/nss/commit/0cc087a447a3f357dd6eab9309269546a3259c72
https://github.com/nss-dev/nss/commit/776c40c416f54b722e0d5b2cfe970ff0c539e485
Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 nss/gtests/pk11_gtest/pk11_curve25519_unittest.cc |  3 +++
 nss/lib/cryptohi/seckey.c                         |  5 +++++
 nss/lib/freebl/dh.c                               |  3 ++-
 nss/lib/freebl/ec.c                               | 14 ++++++++------
 nss/lib/util/quickder.c                           |  7 +++++++
 5 files changed, 25 insertions(+), 7 deletions(-)

diff --git a/nss/gtests/pk11_gtest/pk11_curve25519_unittest.cc b/nss/gtests/pk11_gtest/pk11_curve25519_unittest.cc
index b5cbcd1..fb50ce2 100644
--- a/nss/gtests/pk11_gtest/pk11_curve25519_unittest.cc
+++ b/nss/gtests/pk11_gtest/pk11_curve25519_unittest.cc
@@ -40,6 +40,9 @@ class Pkcs11Curve25519Test
 
     ScopedCERTSubjectPublicKeyInfo certSpki(
         SECKEY_DecodeDERSubjectPublicKeyInfo(&spkiItem));
+    if (!expect_success && !certSpki) {
+      return;
+    }
     ASSERT_TRUE(certSpki);
 
     ScopedSECKEYPublicKey pubKey(SECKEY_ExtractPublicKey(certSpki.get()));
diff --git a/nss/lib/cryptohi/seckey.c b/nss/lib/cryptohi/seckey.c
index 0809097..1730960 100644
--- a/nss/lib/cryptohi/seckey.c
+++ b/nss/lib/cryptohi/seckey.c
@@ -639,6 +639,11 @@ seckey_ExtractPublicKey(const CERTSubjectPublicKeyInfo *spki)
                     return pubk;
                 break;
             case SEC_OID_ANSIX962_EC_PUBLIC_KEY:
+                /* A basic sanity check on inputs. */
+                if (spki->algorithm.parameters.len == 0 || newOs.len == 0) {
+                    PORT_SetError(SEC_ERROR_INPUT_LEN);
+                    break;
+                }
                 pubk->keyType = ecKey;
                 pubk->u.ec.size = 0;
 
diff --git a/nss/lib/freebl/dh.c b/nss/lib/freebl/dh.c
index 6f2bafd..b2d6d74 100644
--- a/nss/lib/freebl/dh.c
+++ b/nss/lib/freebl/dh.c
@@ -210,7 +210,8 @@ DH_Derive(SECItem *publicValue,
     unsigned int len = 0;
     unsigned int nb;
     unsigned char *secret = NULL;
-    if (!publicValue || !prime || !privateValue || !derivedSecret) {
+    if (!publicValue || !publicValue->len || !prime || !prime->len ||
+        !privateValue || !privateValue->len || !derivedSecret) {
         PORT_SetError(SEC_ERROR_INVALID_ARGS);
         return SECFailure;
     }
diff --git a/nss/lib/freebl/ec.c b/nss/lib/freebl/ec.c
index 6468a10..ddbcc23 100644
--- a/nss/lib/freebl/ec.c
+++ b/nss/lib/freebl/ec.c
@@ -202,8 +202,8 @@ ec_NewKey(ECParams *ecParams, ECPrivateKey **privKey,
 #endif
     MP_DIGITS(&k) = 0;
 
-    if (!ecParams || !privKey || !privKeyBytes || (privKeyLen < 0) ||
-        !ecParams->name) {
+    if (!ecParams || ecParams->name == ECCurve_noName ||
+        !privKey || !privKeyBytes || privKeyLen <= 0) {
         PORT_SetError(SEC_ERROR_INVALID_ARGS);
         return SECFailure;
     }
@@ -391,7 +391,7 @@ EC_NewKey(ECParams *ecParams, ECPrivateKey **privKey)
     int len;
     unsigned char *privKeyBytes = NULL;
 
-    if (!ecParams) {
+    if (!ecParams || ecParams->name == ECCurve_noName || !privKey) {
         PORT_SetError(SEC_ERROR_INVALID_ARGS);
         return SECFailure;
     }
@@ -430,7 +430,8 @@ EC_ValidatePublicKey(ECParams *ecParams, SECItem *publicValue)
     mp_err err = MP_OKAY;
     int len;
 
-    if (!ecParams || !publicValue || !ecParams->name) {
+    if (!ecParams || ecParams->name == ECCurve_noName ||
+        !publicValue || !publicValue->len) {
         PORT_SetError(SEC_ERROR_INVALID_ARGS);
         return SECFailure;
     }
@@ -536,8 +537,9 @@ ECDH_Derive(SECItem *publicValue,
     int i;
 #endif
 
-    if (!publicValue || !ecParams || !privateValue || !derivedSecret ||
-        !ecParams->name) {
+    if (!publicValue || !publicValue->len ||
+        !ecParams || ecParams->name == ECCurve_noName ||
+        !privateValue || !privateValue->len || !derivedSecret) {
         PORT_SetError(SEC_ERROR_INVALID_ARGS);
         return SECFailure;
     }
diff --git a/nss/lib/util/quickder.c b/nss/lib/util/quickder.c
index 7a6ac1c..c186551 100644
--- a/nss/lib/util/quickder.c
+++ b/nss/lib/util/quickder.c
@@ -757,6 +757,13 @@ DecodeItem(void* dest,
                         }
 
                         case SEC_ASN1_BIT_STRING: {
+                            /* Can't be 8 or more spare bits, or any spare bits
+			     * if there are no octets. */
+                            if (temp.data[0] >= 8 || (temp.data[0] > 0 && temp.len == 1)) {
+                                PORT_SetError(SEC_ERROR_BAD_DER);
+                                rv = SECFailure;
+                                break;
+                            }
                             /* change the length in the SECItem to be the number
                                of bits */
                             temp.len = (temp.len - 1) * 8 - (temp.data[0] & 0x7);
-- 
2.25.1

