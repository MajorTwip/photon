From ce15e1b973a269b6ea957d5f5e1038e8a78033be Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Tue, 16 Aug 2022 12:35:33 +0000
Subject: [PATCH] cgroup: Use open-time credentials for process migraton perm
 checks
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit a70bcf9ed08f3628a9324f054b0e041697b26853 upstream.

cgroup process migration permission checks are performed at write
time as whether a given operation is allowed or not is dependent on the
content of the write - the PID. This currently uses current's credentials which
is a potential security weakness as it may allow scenarios where a less
privileged process tricks a more privileged one into writing into a fd that
it created.

This patch makes both cgroup2 and cgroup1 process migration interfaces to
use the credentials saved at the time of open (file->f_cred) instead of
current's.

Reported-by: "Eric W. Biederman" <ebiederm@xmission.com>
Suggested-by: Linus Torvalds <torvalds@linuxfoundation.org>
Fixes: 187fe84067bd ("cgroup: require write perm on common ancestor when moving processes on the default hierarchy")
Reviewed-by: Michal Koutn√Ω <mkoutny@suse.com>
Signed-off-by: Tejun Heo <tj@kernel.org>
[OP: backport to v4.14: apply original __cgroup_procs_write() changes to
cgroup_threads_write() and cgroup_procs_write()]
Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
[Ankit: Backported for v4.9 branch]
Signed-off-by: Ankit Jain <ankitja@vmware.com>
---
 kernel/cgroup.c | 16 ++++++++++++----
 1 file changed, 12 insertions(+), 4 deletions(-)

diff --git a/kernel/cgroup.c b/kernel/cgroup.c
index 5702419c9f30..cebfebc177e6 100644
--- a/kernel/cgroup.c
+++ b/kernel/cgroup.c
@@ -2887,13 +2887,14 @@ static int cgroup_procs_write_permission(struct task_struct *task,
 					 struct cgroup *dst_cgrp,
 					 struct kernfs_open_file *of)
 {
-	const struct cred *cred = current_cred();
+	const struct cred *cred = of->file->f_cred;
 	const struct cred *tcred = get_task_cred(task);
 	int ret = 0;
 
 	/*
-	 * even if we're attaching all tasks in the thread group, we only
-	 * need to check permissions on one of them.
+	 * Even if we're attaching all tasks in the thread group, we only need
+	 * to check permissions on one of them. Check permissions using the
+	 * credentials from file open to protect against inherited fd attacks.
 	 */
 	if (!uid_eq(cred->euid, GLOBAL_ROOT_UID) &&
 	    !uid_eq(cred->euid, tcred->uid) &&
@@ -2935,6 +2936,7 @@ static ssize_t __cgroup_procs_write(struct kernfs_open_file *of, char *buf,
 	struct task_struct *tsk;
 	struct cgroup_subsys *ss;
 	struct cgroup *cgrp;
+	const struct cred *saved_cred;
 	pid_t pid;
 	int ssid, ret;
 
@@ -2974,10 +2976,16 @@ static ssize_t __cgroup_procs_write(struct kernfs_open_file *of, char *buf,
 	get_task_struct(tsk);
 	rcu_read_unlock();
 
+	/*
+	 * Process and thread migrations follow same delegation rule. Check
+	 * permissions using the credentials from file open to protect against
+	 * inherited fd attacks.
+	 */
+	saved_cred = override_creds(of->file->f_cred);
 	ret = cgroup_procs_write_permission(tsk, cgrp, of);
+	revert_creds(saved_cred);
 	if (!ret)
 		ret = cgroup_attach_task(cgrp, tsk, threadgroup);
-
 	put_task_struct(tsk);
 	goto out_unlock_threadgroup;
 
-- 
2.23.1

