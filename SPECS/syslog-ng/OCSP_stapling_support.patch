From dbad611f944da8eb764fdd5a5c34a32aa2131175 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?L=C3=A1szl=C3=B3=20V=C3=A1rady?=
 <laszlo.varady@protonmail.com>
Date: Sat, 16 Jul 2022 19:53:12 +0200
Subject: [PATCH 1/5] tlscontext: fix leaking memory in
 tls_context_load_pkcs12()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

tls_context_add_certs(), SSL_CTX_use_certificate(), and
SSL_CTX_use_PrivateKey() do not transfer ownership, so each output of
PKCS12_parse() has to be deallocated.

Signed-off-by: László Várady <laszlo.varady@protonmail.com>
---
 lib/tlscontext.c | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/lib/tlscontext.c b/lib/tlscontext.c
index ddde21dcaf..fca221f9f2 100644
--- a/lib/tlscontext.c
+++ b/lib/tlscontext.c
@@ -666,12 +666,19 @@ tls_context_load_pkcs12(TLSContext *self)
 
   PKCS12_free(pkcs12);
 
+  gboolean loaded = FALSE;
   if (ca_list && !tls_context_add_certs(self, ca_list))
-    return FALSE;
+    goto error;
 
-  return SSL_CTX_use_certificate(self->ssl_ctx, cert)
-         && SSL_CTX_use_PrivateKey(self->ssl_ctx, private_key)
-         && SSL_CTX_check_private_key(self->ssl_ctx);
+  loaded = SSL_CTX_use_certificate(self->ssl_ctx, cert)
+           && SSL_CTX_use_PrivateKey(self->ssl_ctx, private_key)
+           && SSL_CTX_check_private_key(self->ssl_ctx);
+
+error:
+  X509_free(cert);
+  EVP_PKEY_free(private_key);
+  sk_X509_pop_free(ca_list, X509_free);
+  return loaded;
 }
 
 static gboolean

From b55ff7cc447f52543f891c6434f9082186720217 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?L=C3=A1szl=C3=B3=20V=C3=A1rady?=
 <laszlo.varady@protonmail.com>
Date: Sun, 17 Jul 2022 15:45:56 +0200
Subject: [PATCH 2/5] tlscontext: add tls_session_find_issuer()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This method can be used to retrieve the issuer of a given cert.
The issuer will be searched among untrusted intermediate certs and in
the trusted cert store.

Signed-off-by: László Várady <laszlo.varady@protonmail.com>
---
 lib/tlscontext.c | 40 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 40 insertions(+)

diff --git a/lib/tlscontext.c b/lib/tlscontext.c
index fca221f9f2..c29a3105df 100644
--- a/lib/tlscontext.c
+++ b/lib/tlscontext.c
@@ -108,6 +108,46 @@ tls_get_x509_digest(X509 *x, GString *hash_string)
   return TRUE;
 }
 
+static X509 *
+tls_session_find_issuer(TLSSession *self, X509 *cert)
+{
+  STACK_OF(X509) *intermediate_certs = SSL_get_peer_cert_chain(self->ssl);
+
+  for (int i = 0; intermediate_certs && i < sk_X509_num(intermediate_certs); ++i)
+    {
+      X509 *issuer = sk_X509_value(intermediate_certs, i);
+      if (X509_check_issued(issuer, cert) == X509_V_OK)
+        {
+          return X509_dup(issuer);
+        }
+    }
+
+  X509_STORE *store = SSL_CTX_get_cert_store(self->ctx->ssl_ctx);
+  if (!store)
+    return NULL;
+
+  X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();
+  if (!store_ctx)
+    return NULL;
+
+  if (X509_STORE_CTX_init(store_ctx, store, NULL, NULL) != 1)
+    {
+      X509_STORE_CTX_free(store_ctx);
+      return NULL;
+    }
+
+  X509 *issuer = NULL;
+  if (X509_STORE_CTX_get1_issuer(&issuer, store_ctx, cert) != 1)
+    {
+      X509_STORE_CTX_free(store_ctx);
+      return NULL;
+    }
+
+  X509_STORE_CTX_free(store_ctx);
+
+  return issuer;
+}
+
 int
 tls_session_verify_fingerprint(X509_STORE_CTX *ctx)
 {

From f01c862f5e7d660ed0ef3028dac5de9385871138 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?L=C3=A1szl=C3=B3=20V=C3=A1rady?=
 <laszlo.varady@protonmail.com>
Date: Sun, 17 Jul 2022 15:45:58 +0200
Subject: [PATCH 3/5] tlscontext: add client-side OCSP stapling verification
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

When OCSP stapling verification is enabled, the server will be
requested to send back OCSP status responses.

This status response will be verified using the trust store configured
by the user (ca_file, ca_dir, pkcs12_file).

Note: RFC 6961 multi-stapling and TLS 1.3-provided multiple responses
are currently not validated, only the peer certificate is verified.

Signed-off-by: László Várady <laszlo.varady@protonmail.com>
---
 lib/tlscontext.c | 208 +++++++++++++++++++++++++++++++++++++++++++++++
 lib/tlscontext.h |   2 +
 2 files changed, 210 insertions(+)

diff --git a/lib/tlscontext.c b/lib/tlscontext.c
index c29a3105df..ac9b18500b 100644
--- a/lib/tlscontext.c
+++ b/lib/tlscontext.c
@@ -37,6 +37,7 @@
 #include <openssl/err.h>
 #include <openssl/rand.h>
 #include <openssl/pkcs12.h>
+#include <openssl/ocsp.h>
 
 struct _TLSContext
 {
@@ -62,6 +63,8 @@ struct _TLSContext
   gchar *client_sigalgs;
   gchar *ecdh_curve_list;
   gchar *sni;
+  gboolean ocsp_stapling_verify;
+
   SSL_CTX *ssl_ctx;
   GList *trusted_fingerprint_list;
   GList *trusted_dn_list;
@@ -320,6 +323,180 @@ tls_session_verify_callback(int ok, X509_STORE_CTX *ctx)
   return ok;
 }
 
+static inline gboolean
+_ocsp_client_retrieve_response(SSL *ssl, OCSP_RESPONSE **response, OCSP_BASICRESP **basic_response, GError **error)
+{
+  const unsigned char *ocsp_response_der;
+  long ocsp_response_der_length = SSL_get_tlsext_status_ocsp_resp(ssl, &ocsp_response_der);
+  if (!ocsp_response_der || ocsp_response_der_length <= 0)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR,
+                  "no OCSP response was received from the server");
+      return FALSE;
+    }
+
+  OCSP_RESPONSE *ocsp_response = d2i_OCSP_RESPONSE(NULL, &ocsp_response_der, ocsp_response_der_length);
+  if (!ocsp_response)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR,
+                  "OCSP response received from server can not be parsed");
+      return FALSE;
+    }
+
+  if (OCSP_response_status(ocsp_response) != OCSP_RESPONSE_STATUS_SUCCESSFUL)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR, "OCSP response is unsuccessful");
+      OCSP_RESPONSE_free(ocsp_response);
+      return FALSE;
+    }
+
+  OCSP_BASICRESP *ocsp_basic_resp = OCSP_response_get1_basic(ocsp_response);
+  if (!ocsp_basic_resp)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR, "can not extract OCSP basic response");
+      OCSP_RESPONSE_free(ocsp_response);
+      return FALSE;
+    }
+
+  *response = ocsp_response;
+  *basic_response = ocsp_basic_resp;
+  return TRUE;
+}
+
+static inline OCSP_CERTID *
+_get_ocsp_certid(TLSSession *self, X509 *cert, GError **error)
+{
+  X509 *issuer = tls_session_find_issuer(self, cert);
+  if (!issuer)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR, "failed to find certificate issuer");
+      return FALSE;
+    }
+
+  OCSP_CERTID *cert_id = OCSP_cert_to_id(NULL, cert, issuer);
+  if (!cert_id)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR, "failed to retrieve certificate ID");
+      X509_free(issuer);
+      return FALSE;
+    }
+
+  X509_free(issuer);
+
+  return cert_id;
+}
+
+static gboolean
+tls_session_ocsp_client_check_cert_validity(TLSSession *self, OCSP_BASICRESP *ocsp_basic_resp, X509 *cert,
+                                            GError **error)
+{
+  OCSP_CERTID *cert_id = _get_ocsp_certid(self, cert, error);
+  if (!cert_id)
+    return FALSE;
+
+  int status, reason;
+  ASN1_GENERALIZEDTIME *rev_time = NULL;
+  ASN1_GENERALIZEDTIME *this_upd = NULL;
+  ASN1_GENERALIZEDTIME *next_upd = NULL;
+  if (OCSP_resp_find_status(ocsp_basic_resp, cert_id, &status, &reason, &rev_time, &this_upd, &next_upd) != 1)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR, "failed to retrieve OCSP response status");
+      OCSP_CERTID_free(cert_id);
+      return FALSE;
+    }
+
+  OCSP_CERTID_free(cert_id);
+
+  switch (status)
+    {
+    case V_OCSP_CERTSTATUS_GOOD:
+      break;
+    case V_OCSP_CERTSTATUS_REVOKED:
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR,
+                  "certificate is revoked (reason: %s (%d))", OCSP_crl_reason_str(reason), reason);
+      return FALSE;
+    default:
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR, "certificate status is unknown");
+      return FALSE;
+    }
+
+  if (OCSP_check_validity(this_upd, next_upd, 300L, -1L) != 1)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR,
+                  "OCSP response is outside its time validity period");
+      return FALSE;
+    }
+
+  return TRUE;
+}
+
+static gboolean
+tls_session_ocsp_client_verify(TLSSession *self, OCSP_BASICRESP *ocsp_basic_resp, GError **error)
+{
+  SSL_CTX *ssl_ctx = SSL_get_SSL_CTX(self->ssl);
+  X509_STORE *trusted_cert_store = SSL_CTX_get_cert_store(ssl_ctx);
+  STACK_OF(X509) *untrusted_intermediate_certs = SSL_get_peer_cert_chain(self->ssl);
+
+  if (OCSP_basic_verify(ocsp_basic_resp, untrusted_intermediate_certs, trusted_cert_store, 0) != 1)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR, "failed to verify OCSP response signature");
+      return FALSE;
+    }
+
+  X509 *cert = SSL_get_peer_certificate(self->ssl);
+  if (!cert)
+    {
+      g_set_error(error, TLSCONTEXT_ERROR, TLSCONTEXT_INTERNAL_ERROR, "no certificate was presented by server");
+      return FALSE;
+    }
+
+  if (!tls_session_ocsp_client_check_cert_validity(self, ocsp_basic_resp, cert, error))
+    {
+      X509_free(cert);
+      return FALSE;
+    }
+
+  X509_free(cert);
+
+  /* TODO: The server MAY send multiple OCSP responses, one for each cert in the chain,
+   * those have to be validated by tls_session_ocsp_client_check_cert_validity(), _if_ they exist.
+   */
+
+  return TRUE;
+}
+
+static int
+tls_session_ocsp_client_verify_callback(SSL *ssl, void *user_data)
+{
+  TLSSession *self = SSL_get_app_data(ssl);
+
+  OCSP_RESPONSE *ocsp_response = NULL;
+  OCSP_BASICRESP *ocsp_basic_resp = NULL;
+  GError *error = NULL;
+
+  if (!_ocsp_client_retrieve_response(ssl, &ocsp_response, &ocsp_basic_resp, &error))
+    goto err;
+
+  if (!tls_session_ocsp_client_verify(self, ocsp_basic_resp, &error))
+    goto err;
+
+  OCSP_BASICRESP_free(ocsp_basic_resp);
+  OCSP_RESPONSE_free(ocsp_response);
+
+  return 1;
+
+err:
+  msg_error("OCSP stapling verification failed",
+            evt_tag_str("error", error->message),
+            tls_context_format_location_tag(self->ctx));
+
+  g_clear_error(&error);
+  OCSP_BASICRESP_free(ocsp_basic_resp);
+  OCSP_RESPONSE_free(ocsp_response);
+
+  return 0;
+}
+
 void
 tls_session_set_trusted_fingerprints(TLSContext *self, GList *fingerprints)
 {
@@ -541,6 +718,23 @@ tls_context_setup_verify_mode(TLSContext *self)
   SSL_CTX_set_verify(self->ssl_ctx, verify_mode, tls_session_verify_callback);
 }
 
+static void
+tls_context_setup_ocsp_stapling(TLSContext *self)
+{
+  if (self->mode == TM_CLIENT && self->ocsp_stapling_verify)
+    {
+      long status_cb_set = SSL_CTX_set_tlsext_status_cb(self->ssl_ctx, tls_session_ocsp_client_verify_callback);
+      g_assert(status_cb_set);
+      return;
+    }
+
+  if (self->mode == TM_SERVER)
+    {
+      g_assert(!self->ocsp_stapling_verify
+               && "OCSP stapling and its verification are currently not implemented on the server side");
+    }
+}
+
 static void
 tls_context_setup_ssl_options(TLSContext *self)
 {
@@ -803,6 +997,8 @@ tls_context_setup_context(TLSContext *self)
     tls_context_setup_session_tickets(self);
 
   tls_context_setup_verify_mode(self);
+  tls_context_setup_ocsp_stapling(self);
+
   tls_context_setup_ssl_options(self);
   if (!tls_context_setup_ecdh(self))
     {
@@ -848,6 +1044,12 @@ tls_context_setup_session(TLSContext *self)
   else
     SSL_set_accept_state(ssl);
 
+  if (self->mode == TM_CLIENT && self->ocsp_stapling_verify)
+    {
+      long ocsp_enabled = SSL_set_tlsext_status_type(ssl, TLSEXT_STATUSTYPE_ocsp);
+      g_assert(ocsp_enabled);
+    }
+
   TLSSession *session = tls_session_new(ssl, self);
   if (!session)
     {
@@ -1175,6 +1377,12 @@ tls_context_set_sni(TLSContext *self, const gchar *sni)
   self->sni = g_strdup(sni);
 }
 
+void
+tls_context_set_ocsp_stapling_verify(TLSContext *self, gboolean ocsp_stapling_verify)
+{
+  self->ocsp_stapling_verify = ocsp_stapling_verify;
+}
+
 void
 tls_log_certificate_validation_progress(int ok, X509_STORE_CTX *ctx)
 {
diff --git a/lib/tlscontext.h b/lib/tlscontext.h
index 86f95e94e9..f5de60c4fd 100644
--- a/lib/tlscontext.h
+++ b/lib/tlscontext.h
@@ -99,6 +99,7 @@ GQuark tls_context_error_quark(void);
 enum TLSContextError
 {
   TLSCONTEXT_UNSUPPORTED,
+  TLSCONTEXT_INTERNAL_ERROR,
 };
 
 #define TMI_ALLOW_COMPRESS 0x1
@@ -139,6 +140,7 @@ void tls_context_set_client_sigalgs(TLSContext *self, const gchar *sigalgs);
 void tls_context_set_ecdh_curve_list(TLSContext *self, const gchar *ecdh_curve_list);
 void tls_context_set_dhparam_file(TLSContext *self, const gchar *dhparam_file);
 void tls_context_set_sni(TLSContext *self, const gchar *sni);
+void tls_context_set_ocsp_stapling_verify(TLSContext *self, gboolean ocsp_stapling_verify);
 const gchar *tls_context_get_key_file(TLSContext *self);
 EVTTAG *tls_context_format_tls_error_tag(TLSContext *self);
 EVTTAG *tls_context_format_location_tag(TLSContext *self);

From d051d2610cd86b2748b37d89078e2285e181ce7f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?L=C3=A1szl=C3=B3=20V=C3=A1rady?=
 <laszlo.varady@protonmail.com>
Date: Sun, 17 Jul 2022 15:45:59 +0200
Subject: [PATCH 4/5] afsocket: add ocsp-stapling-verify(yes/no) for TLS
 destinations
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: László Várady <laszlo.varady@protonmail.com>
---
 modules/afsocket/afsocket-grammar.ym | 5 +++++
 modules/afsocket/afsocket-parser.c   | 1 +
 2 files changed, 6 insertions(+)

diff --git a/modules/afsocket/afsocket-grammar.ym b/modules/afsocket/afsocket-grammar.ym
index 3631dcfba4..890e5f182b 100644
--- a/modules/afsocket/afsocket-grammar.ym
+++ b/modules/afsocket/afsocket-grammar.ym
@@ -196,6 +196,7 @@ systemd_syslog_grammar_set_source_driver(SystemDSyslogSourceDriver *sd)
 %token KW_SNI
 %token KW_ALLOW_COMPRESS
 %token KW_KEYLOG_FILE
+%token KW_OCSP_STAPLING_VERIFY
 
 /* INCLUDE_DECLS */
 
@@ -781,6 +782,10 @@ dest_tls_option
             if ($3)
               tls_context_set_sni(last_tls_context, ((AFInetDestDriver *)last_driver)->primary);
           }
+        | KW_OCSP_STAPLING_VERIFY '(' yesno ')'
+          {
+            tls_context_set_ocsp_stapling_verify(last_tls_context, $3);
+          }
         ;
 
 tls_options
diff --git a/modules/afsocket/afsocket-parser.c b/modules/afsocket/afsocket-parser.c
index 8662af1b53..6c9e6f8041 100644
--- a/modules/afsocket/afsocket-parser.c
+++ b/modules/afsocket/afsocket-parser.c
@@ -65,6 +65,7 @@ static CfgLexerKeyword afsocket_keywords[] =
   { "ssl_options",        KW_SSL_OPTIONS },
   { "sni",                KW_SNI },
   { "allow_compress",     KW_ALLOW_COMPRESS },
+  { "ocsp_stapling_verify", KW_OCSP_STAPLING_VERIFY },
 
   { "localip",            KW_LOCALIP },
   { "ip",                 KW_IP },

From 192b0c7e7c23c88b77ceba568eb8471c1003cf3c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?L=C3=A1szl=C3=B3=20V=C3=A1rady?=
 <laszlo.varady@protonmail.com>
Date: Sun, 17 Jul 2022 16:59:11 +0200
Subject: [PATCH 5/5] http: add OCSP stapling support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: László Várady <laszlo.varady@protonmail.com>
---
 configure.ac                 |  2 +-
 modules/http/CMakeLists.txt  |  1 +
 modules/http/http-grammar.ym |  6 ++++++
 modules/http/http-parser.c   |  1 +
 modules/http/http-worker.c   |  5 +++++
 modules/http/http.c          | 13 +++++++++++++
 modules/http/http.h          |  2 ++
 7 files changed, 29 insertions(+), 1 deletion(-)

diff --git a/configure.ac b/configure.ac
index 8cfab2251e..6c87469010 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1383,7 +1383,7 @@ if test "x$enable_http" != "xno" && test "x$with_libcurl" != "xno"; then
         if test "$enable_http" = "yes"; then
            old_CFLAGS=$CFLAGS
            CFLAGS=$LIBCURL_CFLAGS
-           AC_CHECK_DECLS([CURL_SSLVERSION_TLSv1_0, CURL_SSLVERSION_TLSv1_1, CURL_SSLVERSION_TLSv1_2, CURL_SSLVERSION_TLSv1_3, CURLOPT_TLS13_CIPHERS],
+           AC_CHECK_DECLS([CURL_SSLVERSION_TLSv1_0, CURL_SSLVERSION_TLSv1_1, CURL_SSLVERSION_TLSv1_2, CURL_SSLVERSION_TLSv1_3, CURLOPT_TLS13_CIPHERS, CURLOPT_SSL_VERIFYSTATUS],
                           [], [],
                           [[#include <curl/curl.h>]])
            CFLAGS=$old_CFLAGS
diff --git a/modules/http/CMakeLists.txt b/modules/http/CMakeLists.txt
index dd7fa800b0..c1fd3fe116 100644
--- a/modules/http/CMakeLists.txt
+++ b/modules/http/CMakeLists.txt
@@ -58,6 +58,7 @@ curl_detect_compile_option(CURL_SSLVERSION_TLSv1_1)
 curl_detect_compile_option(CURL_SSLVERSION_TLSv1_2)
 curl_detect_compile_option(CURL_SSLVERSION_TLSv1_3)
 curl_detect_compile_option(CURLOPT_TLS13_CIPHERS)
+curl_detect_compile_option(CURLOPT_SSL_VERIFYSTATUS)
 
 install(FILES ${HTTP_MODULE_DEV_HEADERS} DESTINATION include/syslog-ng/modules/http/)
 
diff --git a/modules/http/http-grammar.ym b/modules/http/http-grammar.ym
index 0515d37d97..378ca4866a 100644
--- a/modules/http/http-grammar.ym
+++ b/modules/http/http-grammar.ym
@@ -71,6 +71,7 @@ HttpResponseHandler last_response_handler;
 %token KW_SSL_VERSION
 %token KW_PEER_VERIFY
 %token KW_TIMEOUT
+%token KW_OCSP_STAPLING_VERIFY
 %token KW_TLS
 %token KW_BATCH_BYTES
 %token KW_BODY_PREFIX
@@ -189,6 +190,11 @@ http_tls_option
           }
       }
     | KW_PEER_VERIFY '(' yesno ')'            { http_dd_set_peer_verify(last_driver, $3); }
+    | KW_OCSP_STAPLING_VERIFY '(' yesno ')'
+      {
+        CHECK_ERROR(http_dd_set_ocsp_stapling_verify(last_driver, $3), @3,
+                    "Error setting ocsp-stapling-verify(), OCSP stapling is not supported with this libcurl version");
+      }
     ;
 
 tls_cipher_suites
diff --git a/modules/http/http-parser.c b/modules/http/http-parser.c
index 7e3161a16e..894869e89a 100644
--- a/modules/http/http-parser.c
+++ b/modules/http/http-parser.c
@@ -49,6 +49,7 @@ static CfgLexerKeyword http_keywords[] =
   { "use_system_cert_store", KW_USE_SYSTEM_CERT_STORE },
   { "ssl_version",      KW_SSL_VERSION },
   { "peer_verify",      KW_PEER_VERIFY },
+  { "ocsp_stapling_verify", KW_OCSP_STAPLING_VERIFY },
   { "accept_redirects", KW_ACCEPT_REDIRECTS },
   { "response_action",  KW_RESPONSE_ACTION },
   { "success",          KW_SUCCESS },
diff --git a/modules/http/http-worker.c b/modules/http/http-worker.c
index 3699c37341..6e30dbec34 100644
--- a/modules/http/http-worker.c
+++ b/modules/http/http-worker.c
@@ -140,6 +140,11 @@ _setup_static_options_in_curl(HTTPDestinationWorker *self)
     curl_easy_setopt(self->curl, CURLOPT_TLS13_CIPHERS, owner->tls13_ciphers);
 #endif
 
+#if SYSLOG_NG_HAVE_DECL_CURLOPT_SSL_VERIFYSTATUS
+  if (owner->ocsp_stapling_verify)
+    curl_easy_setopt(self->curl, CURLOPT_SSL_VERIFYSTATUS, 1L);
+#endif
+
   if (owner->proxy)
     curl_easy_setopt(self->curl, CURLOPT_PROXY, owner->proxy);
 
diff --git a/modules/http/http.c b/modules/http/http.c
index 12da72195e..139405dfb8 100644
--- a/modules/http/http.c
+++ b/modules/http/http.c
@@ -269,6 +269,19 @@ http_dd_set_peer_verify(LogDriver *d, gboolean verify)
   self->peer_verify = verify;
 }
 
+gboolean
+http_dd_set_ocsp_stapling_verify(LogDriver *d, gboolean verify)
+{
+#if SYSLOG_NG_HAVE_DECL_CURLOPT_SSL_VERIFYSTATUS
+  HTTPDestinationDriver *self = (HTTPDestinationDriver *) d;
+
+  self->ocsp_stapling_verify = verify;
+  return TRUE;
+#else
+  return FALSE;
+#endif
+}
+
 void
 http_dd_set_accept_redirects(LogDriver *d, gboolean accept_redirects)
 {
diff --git a/modules/http/http.h b/modules/http/http.h
index c1c199c1f4..d76b149808 100644
--- a/modules/http/http.h
+++ b/modules/http/http.h
@@ -56,6 +56,7 @@ typedef struct
   GString *delimiter;
   int ssl_version;
   gboolean peer_verify;
+  gboolean ocsp_stapling_verify;
   gboolean accept_redirects;
   short int method_type;
   glong timeout;
@@ -86,6 +87,7 @@ gboolean http_dd_set_tls13_cipher_suite(LogDriver *d, const gchar *tls13_ciphers
 void http_dd_set_proxy(LogDriver *d, const gchar *proxy);
 gboolean http_dd_set_ssl_version(LogDriver *d, const gchar *value);
 void http_dd_set_peer_verify(LogDriver *d, gboolean verify);
+gboolean http_dd_set_ocsp_stapling_verify(LogDriver *d, gboolean verify);
 void http_dd_set_timeout(LogDriver *d, glong timeout);
 void http_dd_set_batch_bytes(LogDriver *d, glong batch_bytes);
 void http_dd_set_body_prefix(LogDriver *d, const gchar *body_prefix);
