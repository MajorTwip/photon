From b49614f8e31cba141bad4ce3782f6e6d4499ec9e Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Thu, 2 Mar 2023 22:53:46 +0530
Subject: [PATCH] mkinitrd: verbose fix

Add a sanity check to verify initrd post creation.
If something is wrong with initrd, show an error on tty.

If running in non tty, show all logs.

mkinitrd logs will be captured at: `/var/log/mkinitrd-<kernel>.log`

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 mkinitrd-dracut.sh | 250 ++++++++++++++++++++++++++++-----------------
 1 file changed, 157 insertions(+), 93 deletions(-)

diff --git a/mkinitrd-dracut.sh b/mkinitrd-dracut.sh
index 3af95cf..a6fd630 100755
--- a/mkinitrd-dracut.sh
+++ b/mkinitrd-dracut.sh
@@ -1,5 +1,6 @@
 #!/bin/bash --norc
-kernel_ver_dir='/var/lib/initramfs/kernel'
+
+kernel_ver_dir="/var/lib/initramfs/kernel"
 
 boot_dir="/boot"
 quiet=0
@@ -8,61 +9,63 @@ force=0
 set_hostonly=0
 no_hostonly=0
 
+DRACUT_DBG=0
+
 error() { echo "$@" >&2; }
 
 usage () {
-    [[ $1 = '-n' ]] && cmd=echo || cmd=error
-
-    $cmd "usage: ${0##*/} [--version] [--help] [-v] [-f] [--preload <module>]"
-    $cmd "       [--image-version] [--with=<module>]"
-    $cmd "       [--nocompress]"
-    $cmd "       [--set-hostonly]"
-    $cmd "       [--no-hostonly]"
-    $cmd "       <initrd-image> <kernel-version>"
-    $cmd ""
-    $cmd "       (ex: ${0##*/} /boot/initramfs-$kver.img $kver)"
-
-    [[ $1 = '-n' ]] && exit 0
-    exit 1
+  local cmd=""
+
+  [[ $1 = '-n' ]] && cmd=echo || cmd=error
+
+  $cmd "usage: ${0##*/} [--version] [--help] [-v] [-f] [--preload <module>]"
+  $cmd "       [--image-version] [--with=<module>]"
+  $cmd "       [--nocompress]"
+  $cmd "       [--set-hostonly]"
+  $cmd "       [--no-hostonly]"
+  $cmd "       <initrd-image> <kernel-version>"
+  $cmd ""
+  $cmd "       (ex: ${0##*/} /boot/initramfs-$kver.img $kver)"
+
+  [[ $1 = '-n' ]] && exit 0
+  exit 1
 }
 
 # Little helper function for reading args from the commandline.
 # it automatically handles -a b and -a=b variants, and returns 1 if
 # we need to shift $3.
 read_arg() {
-    # $1 = arg name
-    # $2 = arg value
-    # $3 = arg parameter
-    param="$1"
-    local rematch='^[^=]*=(.*)$' result
-    if [[ $2 =~ $rematch ]]; then
-        read "$param" <<< "${BASH_REMATCH[1]}"
-    else
-	for ((i=3; $i <= $#; i++)); do
-            # Only read next arg if it not an arg itself.
-            if [[ ${@:$i:1} = -* ]];then
-		break
-            fi
-            result="$result ${@:$i:1}"
-            # There is no way to shift our callers args, so
-            # return "no of args" to indicate they should do it instead.
-	done
-	read "$1" <<< "$result"
-        return $(($i - 3))
-    fi
+  # $1 = arg name
+  # $2 = arg value
+  # $3 = arg parameter
+  local param="$1"
+  local rematch='^[^=]*=(.*)$' result
+  if [[ $2 =~ $rematch ]]; then
+    read "$param" <<< "${BASH_REMATCH[1]}"
+  else
+    for ((i=3; $i <= $#; i++)); do
+      # Only read next arg if it not an arg itself.
+      if [[ ${@:$i:1} = -* ]];then
+        break
+      fi
+      result="$result ${@:$i:1}"
+      # There is no way to shift our callers args, so
+      # return "no of args" to indicate they should do it instead.
+    done
+    read "$1" <<< "$result"
+    return $(($i - 3))
+  fi
 }
 
 # For photon
 default_kernel_images() {
-    local kernel_version
-
-    for kernel_version in $(ls $kernel_ver_dir) ; do
-
-        # Take this directory as the source of truth
-        kernels="$kernels $kernel_version"
-        targets="$targets $boot_dir/initrd.img-$kernel_version"
+  local kernel_version=""
 
-    done
+  for kernel_version in $(ls $kernel_ver_dir); do
+    # Take this directory as the source of truth
+    kernels="$kernels $kernel_version"
+    targets="$targets $boot_dir/initrd.img-$kernel_version"
+  done
 }
 
 while (($# > 0)); do
@@ -111,27 +114,27 @@ while (($# > 0)); do
         --looppath*) ;;
         --dsdt*) ;;
         --bootchart) ;;
-	-s) ;;
-	--quiet|-q) quiet=1;;
-	-b) read_arg boot_dir "$@" || shift $?
-	    if [ ! -d $boot_dir ];then
-		error "Boot directory $boot_dir does not exist"
-		exit 1
-	    fi
-	    ;;
-	-k) # Would be nice to get a list of images here
-	    read_arg kernel_images "$@" || shift $?
-	    for kernel_image in $kernel_images;do
-		kernels="$kernels ${kernel_image#*-}"
-	    done
-	    host_only=1
-	    force=1
-	    ;;
-	-i) read_arg initrd_images "$@" || shift $?
-	    for initrd_image in $initrd_images;do
-		targets="$targets $boot_dir/$initrd_image"
-	    done
-	    ;;
+  -s) ;;
+  --quiet|-q) quiet=1;;
+  -b) read_arg boot_dir "$@" || shift $?
+      if [ ! -d $boot_dir ];then
+    error "Boot directory $boot_dir does not exist"
+    exit 1
+      fi
+      ;;
+  -k) # Would be nice to get a list of images here
+      read_arg kernel_images "$@" || shift $?
+      for kernel_image in $kernel_images;do
+    kernels="$kernels ${kernel_image#*-}"
+      done
+      host_only=1
+      force=1
+      ;;
+  -i) read_arg initrd_images "$@" || shift $?
+      for initrd_image in $initrd_images;do
+    targets="$targets $boot_dir/$initrd_image"
+      done
+      ;;
         *)  if [[ ! $targets ]]; then
             targets=$1
             elif [[ ! $kernels ]]; then
@@ -178,36 +181,97 @@ fi
 [[ $host_only == 1 ]] && dracut_args="${dracut_args} -H"
 [[ $force == 1 ]]     && dracut_args="${dracut_args} -f"
 
+initrd_sanity_check() {
+  local ret=0
+  local status="$1"
+  local log_fn="$2"
+  local target="$3"
+  local errmsg=""
+
+  # initrd issues can be fatal, so if anything goes wrong during initrd creation
+  # print errors to console
+  if [ ${status} -ne 0 ]; then
+    errmsg=$(cat << EOF
+\n\n------------------------ ERROR NOTICE ------------------------------
+          DRACUT RETURNED NON-ZERO EXIT STATUS(${status})
+
+PROBABLY ${target} IS FAULTY
+SYSTEM MAY BECOME UNUSABLE POST REBOOT
+---------------------- PROCEED WITH CAUTION ------------------------
+EOF
+)
+    echo -e "${errmsg}" 1>&2 |& tee -a "${log_fn}"
+    ret=1
+  fi
+
+  if ! lsinitrd ${target} 1>/dev/null; then
+    errmsg=$(cat << EOF
+\n\n------------------------ ERROR NOTICE ------------------------------
+                  lsinitrd ${target} FAILED
+
+PROBABLY ${target} IS FAULTY
+SYSTEM MAY BECOME UNUSABLE POST REBOOT
+---------------------- PROCEED WITH CAUTION -----------------------\n\n
+EOF
+)
+    echo -e "${errmsg}" 1>&2 |& tee -a "${log_fn}"
+    ret=1
+  fi
+
+  return ${ret}
+}
+
+# If running in non tty, enable verbose
+# It's probably happening in some kind of build env, we need verbose.
+if ! test -t 1; then
+  quiet=0
+fi
+
+final_ret=0
+
 for ((i=0 ; $i<${#targets[@]} ; i++)); do
+  ret=0
+
+  if [[ $img_vers ]];then
+    target="${targets[$i]}-${kernels[$i]}"
+  else
+    target="${targets[$i]}"
+  fi
+  kernel="${kernels[$i]}"
+
+
+  log_fn="/var/log/mkinitrd-${kernel}.log"
+
+  echo "Creating $target"
+
+  if [ $DRACUT_DBG -ne 0 ]; then
+    export DRACUT_INSTALL="/usr/lib/dracut/dracut-install --verbose"
+    dracut_cmd="dracut -L 6 $dracut_args"
+  else
+    dracut_cmd="dracut $dracut_args"
+  fi
+
+  if [[ -s "$kernel_ver_dir/$kernel" ]]; then
+    dracut_cmd+=" $(cat $kernel_ver_dir/$kernel)"
+  fi
 
-    if [[ $img_vers ]];then
-	target="${targets[$i]}-${kernels[$i]}"
-    else
-	target="${targets[$i]}"
-    fi
-    kernel="${kernels[$i]}"
-
-    if [[ -s "$kernel_ver_dir/$kernel" ]]; then
-        readarray -t kernel_cfg < <(xargs -n1 -a $kernel_ver_dir/$kernel)
-    else
-        kernel_cfg=()
-    fi
-
-    # Duplicate code: No way found how to redirect output based on $quiet
-    if [[ $quiet == 1 ]];then
-	echo "Creating $target"
-	if [[ $basicmodules ]]; then
-            dracut $dracut_args --add-drivers "$basicmodules" "${kernel_cfg[@]}" "$target" \
-		"$kernel" &>/dev/null
-	else
-            dracut $dracut_args "${kernel_cfg[@]}" "$target" "$kernel" &>/dev/null
-	fi
-    else
-	if [[ $basicmodules ]]; then
-            dracut $dracut_args --add-drivers "$basicmodules" "${kernel_cfg[@]}" "$target" \
-		"$kernel"
-	else
-            dracut $dracut_args "${kernel_cfg[@]}" "$target" "$kernel"
-	fi
-    fi
+  if [[ $basicmodules ]]; then
+    dracut_cmd+=" --add-drivers \"$basicmodules\""
+  fi
+  dracut_cmd+=" \"$target\" \"$kernel\""
+
+  if [ ${quiet} -eq 1 ]; then
+    eval "${dracut_cmd}" &> "${log_fn}"
+  else
+    eval "${dracut_cmd}" |& tee "${log_fn}"
+  fi
+
+  ret=${PIPESTATUS[0]}
+  if ! initrd_sanity_check "${ret}" "${log_fn}" "${target}"; then
+    final_ret=1
+  fi
 done
+
+[ $final_ret -ne 0 ] && error "--- ERROR: mkinitrd FAILED, SOMETHING WENT WRONG ---"
+
+exit ${final_ret}
-- 
2.39.2

