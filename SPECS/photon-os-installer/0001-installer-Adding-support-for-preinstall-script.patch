From 83c92942bf35736b7040f1724a41f4d75ea10bcf Mon Sep 17 00:00:00 2001
From: Ankit Jain <ankitja@vmware.com>
Date: Mon, 17 Oct 2022 08:56:54 +0000
Subject: [PATCH 1/2] installer: Adding support for preinstall script

- This script runs before installation starts.
- Using this script, value($VALUE) can be populated
  dynamically at runtime
  - Value($VALUE) should be determined and exported
    properly inside the preinstall script.
Example:
{
  "disk": "$DISK"
  "preinstall": [
                  "#!/bin/sh",
                  "ondisk=$(ls -lh /dev/disk/by-path/ | grep 'scsi-0:0:1:0' | cut -d' ' -f 9)",
                  "export DISK=\"/dev/disk/by-path/$ondisk\""
                ]
}
- Also, multiple preinstall scripts can be run which should
  be present inside the iso.
- using "search_path" and "preinstallscripts"
Example:
{
  "search_path": [
    "/mnt/media"
  ],
  "preinstallscripts": [
    "pre_test.sh"
  ]
}

Change-Id: I16b8087ef8abe6601517b8f0a0b602265c8473b3
Signed-off-by: Ankit Jain <ankitja@vmware.com>
---
 photon_installer/commandutils.py         |  9 +++--
 photon_installer/installer.py            | 32 +++++++++++++++++
 photon_installer/ks_config.txt           | 17 +++++++++
 photon_installer/modules/m_preinstall.py | 44 ++++++++++++++++++++++++
 4 files changed, 99 insertions(+), 3 deletions(-)
 create mode 100644 photon_installer/modules/m_preinstall.py

diff --git a/photon_installer/commandutils.py b/photon_installer/commandutils.py
index 6c06b60..bb12b8d 100644
--- a/photon_installer/commandutils.py
+++ b/photon_installer/commandutils.py
@@ -18,7 +18,7 @@ class CommandUtils(object):
     def __init__(self, logger):
         self.logger = logger
 
-    def run(self, cmd):
+    def run(self, cmd, update_env = False):
         self.logger.debug(cmd)
         use_shell = not isinstance(cmd, list)
         process = subprocess.Popen(cmd, shell=use_shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
@@ -26,13 +26,16 @@ class CommandUtils(object):
         retval = process.returncode
         if out != b'':
             self.logger.info(out.decode())
+            if update_env:
+                os.environ.clear()
+                os.environ.update(dict(line.partition('=')[::2] for line in out.decode('utf8').split('\0') if line))
         if retval != 0:
             self.logger.info("Command failed: {}".format(cmd))
             self.logger.info("Error code: {}".format(retval))
             self.logger.error(err.decode())
         return retval
 
-    def run_in_chroot(self, chroot_path, cmd):
+    def run_in_chroot(self, chroot_path, cmd, update_env = False):
         # Use short command here. Initial version was:
         # chroot "${BUILDROOT}" \
         #   /usr/bin/env -i \
@@ -41,7 +44,7 @@ class CommandUtils(object):
         #   PS1='\u:\w\$ ' \
         #   PATH=/bin:/usr/bin:/sbin:/usr/sbin \
         #   /usr/bin/bash --login +h -c "cd installer;$*"
-        return self.run(['chroot', chroot_path, '/bin/bash', '-c', cmd])
+        return self.run(['chroot', chroot_path, '/bin/bash', '-c', cmd], update_env)
 
     @staticmethod
     def is_vmware_virtualization():
diff --git a/photon_installer/installer.py b/photon_installer/installer.py
index 1d01139..46a34db 100755
--- a/photon_installer/installer.py
+++ b/photon_installer/installer.py
@@ -26,6 +26,7 @@ from progressbar import ProgressBar
 from window import Window
 from networkmanager import NetworkManager
 from enum import Enum
+from collections import abc
 
 BIOSSIZE = 4
 ESPSIZE = 10
@@ -71,6 +72,8 @@ class Installer(object):
         'password',
         'postinstall',
         'postinstallscripts',
+        'preinstall',
+        'preinstallscripts',
         'public_key',
         'photon_docker_image',
         'search_path',
@@ -134,6 +137,10 @@ class Installer(object):
         self.logger = Logger.get_logger(self.log_path, log_level, console)
         self.cmd = CommandUtils(self.logger)
 
+        # run preinstall scripts before installation begins
+        if install_config:
+            self._load_preinstall(install_config)
+
         # run UI configurator iff install_config param is None
         if not install_config and ui_config:
             from iso_config import IsoConfig
@@ -164,6 +171,31 @@ class Installer(object):
         else:
             self._install()
 
+    def _fill_dynamic_conf(self, install_config):
+        if isinstance(install_config, abc.Mapping) or isinstance(install_config, list):
+            for key, value in install_config.items():
+                if isinstance(value, abc.Mapping):
+                    yield from self._fill_dynamic_conf(value)
+                elif isinstance(value, list):
+                    for v in value:
+                        yield from self._fill_dynamic_conf(v)
+                else:
+                    if isinstance(value, str) and (value.startswith('$') and not value.startswith('$$')):
+                        if value[1:] in os.environ:
+                            install_config[key] = os.environ[value[1:]]
+                        else:
+                            raise Exception("Install configuration has dynamic value=\"{}\" for key=\"{}\" \
+                                            \n which is not exported in preinstall script. \
+                                            \n Please export dynamic values in preinstall script in ks file as below: \
+                                            \n export {}=\"<my-val>\"".format(value,key,value[1:]))
+
+    def _load_preinstall(self, install_config):
+        if 'preinstall' in install_config or 'preinstallscripts' in install_config:
+            self.install_config = install_config
+            self._execute_modules(modules.commons.PRE_INSTALL)
+            for fill_values in self._fill_dynamic_conf(install_config):
+                print(fill_values)
+
     def _add_defaults(self, install_config):
         """
         Add default install_config settings if not specified
diff --git a/photon_installer/ks_config.txt b/photon_installer/ks_config.txt
index 335a019..7df7c9e 100644
--- a/photon_installer/ks_config.txt
+++ b/photon_installer/ks_config.txt
@@ -242,6 +242,23 @@ Kickstart config file is a json format with following possible parameters:
 	Scripts will be looked up in "search_path" list.
 	Example: { "postinstallscripts": ["rpi3-custom-patch.sh"] }
 
+"preinstall" (optional)
+	Contains list of lines to be executed as a single script on
+	the target before installation starts.
+	if ks file defines any value($VALUE) that need to be populated dynamically
+	during runtime then it should be determined and exported in preinstall script.
+	Example: {
+			"disk": "$DISK"
+			"preinstall": [
+                                "#!/bin/sh",
+                                "ondisk=$(ls -lh /dev/disk/by-path/ | grep 'scsi-0:0:1:0' | cut -d' ' -f 9)",
+                                "export DISK=\"/dev/disk/by-path/$ondisk\""
+                                ] }
+"preinstallscripts" (optional)
+	Contains list of scripts to execute on the target before installation starts.
+	Scripts will be looked up in "search_path" list.
+	Example: { "preinstallscripts": ["find_disk.sh"] }
+
 "public_key" (optional)
 	To inject entry to authorized_keys as a string. Setting this variable
 	enables root login in sshd config.
diff --git a/photon_installer/modules/m_preinstall.py b/photon_installer/modules/m_preinstall.py
new file mode 100644
index 0000000..3f08db5
--- /dev/null
+++ b/photon_installer/modules/m_preinstall.py
@@ -0,0 +1,44 @@
+#/*
+# * Copyright Â© 2020 VMware, Inc.
+# * SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-only
+# */
+
+import os
+import subprocess
+import commons
+import shutil
+
+install_phase = commons.PRE_INSTALL
+enabled = True
+
+def execute(installer):
+    if 'preinstall' not in installer.install_config and 'preinstallscripts' not in installer.install_config:
+        return
+
+    tempdir = "/tmp/tempscripts"
+    if not os.path.exists(tempdir):
+        os.mkdir(tempdir)
+
+    if 'preinstall' in installer.install_config:
+        installer.logger.info("Run preinstall script")
+        script = installer.install_config['preinstall']
+
+        script_file = os.path.join(tempdir, 'builtin_preinstall.sh')
+
+        with open(script_file, 'wb') as outfile:
+            outfile.write("\n".join(script).encode())
+        os.chmod(script_file, 0o700)
+
+    if 'preinstallscripts' in installer.install_config:
+        for scriptname in installer.install_config['preinstallscripts']:
+            script_file = installer.getfile(scriptname)
+            shutil.copy(script_file, tempdir)
+
+    for script in os.listdir(tempdir):
+        installer.logger.info("Running script {}".format(script))
+        cmd = ["/bin/bash"]
+        cmd.append("-c")
+        cmd.append("set -a && source {}/{} && env -0".format(tempdir, script))
+        installer.cmd.run(cmd, True)
+
+    shutil.rmtree(tempdir, ignore_errors=True)
-- 
2.30.5

